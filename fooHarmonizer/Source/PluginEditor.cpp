/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"

// Creates a slider with customized params
void FooHarmonizerAudioProcessorEditor::createSlider(Slider &slider, Slider::SliderStyle style, double defaultVal,
                                                     double min, double max, double incr, std::string name)
{
    // Define Slider parameters
    slider.setSliderStyle(style);
    slider.setRange(min,max,incr);
    slider.setTextBoxStyle(Slider::NoTextBox, false, 90, 0);
    slider.setPopupDisplayEnabled(true, this);
    slider.setTextValueSuffix(" " + name);
    slider.setValue(defaultVal);
    
    // Add a listener (user interaction)
    slider.addListener(this);
    // Add slider to editor
    addAndMakeVisible(&slider);
    // set name
    slider.setComponentID(name);
}

// Creates a label with customized params
void FooHarmonizerAudioProcessorEditor::createLabel(Label &label, std::string name)
{
    label.setSize(50,20);
    label.setEnabled(true);
    label.setText(name, dontSendNotification);
    addAndMakeVisible(label);
    label.setVisible(true);
    label.isAlwaysOnTop();
}

//==============================================================================
FooHarmonizerAudioProcessorEditor::FooHarmonizerAudioProcessorEditor (FooHarmonizerAudioProcessor& p)
: AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (500, 500);
    
    createSlider(mixSlider, Slider::Rotary, 100, 0, 100, 1, "Blend");
    createSlider(pitchSlider, Slider::Rotary, 7, -12, 12, 1, "Semitone");
    createSlider(lowpassSlider, Slider::Rotary, 0, 0, 20000, 10, "Lowpass Filter");
    createSlider(highpassSlider, Slider::Rotary, 0, 0, 20000, 10, "Highpass Filter");
}

FooHarmonizerAudioProcessorEditor::~FooHarmonizerAudioProcessorEditor()
{
}

//==============================================================================
void FooHarmonizerAudioProcessorEditor::paint (Graphics& g)
{
    // Background
    g.fillAll (Colours::white);
    
    // Texts and Line Graph
    g.setColour (Colours::black);
    g.setFont (40.0f);
    g.drawFittedText ("Foo Harmonizer", getLocalBounds(), Justification::centredTop, 1);
    g.setFont(25.0f);
    g.drawFittedText("by Ryan Foo", getLocalBounds(), Justification::centredBottom, 2);
    
    // Backgrounds
    g.setColour(Colours::grey);
}

void FooHarmonizerAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    mixSlider.setBounds(100, 125, 50, 50);
    pitchSlider.setBounds(350, 125, 50, 50);
    lowpassSlider.setBounds(100, 375, 50, 50);
    highpassSlider.setBounds(350, 375, 50, 50);
}

// Callback from listener
void FooHarmonizerAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    
}